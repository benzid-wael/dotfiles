#!/bin/bash


VERSION="0.0.0"

#Set Script Name variable
SCRIPT=`basename ${BASH_SOURCE[0]}`

NODE_VERSION=0.10.33

#Set fonts for Help.
NORM=`tput sgr0`
BOLD=`tput bold`
REV=`tput smso`


OPTS=`getopt -o Vhg --long version,help,global,no-git,git-name,git-email,no-vim,no-virtualenv,no-node -n 'parse-options' -- "$@"`

eval set -- "$OPTS"

PRINT_HELP=false
PRINT_VERSION=false
GLOBAL=false
NO_GIT=false
GIT_NAME=''
GIT_EMAIL=''
NO_VIM=false
NO_VIRTUALENV=false
NO_NODE=false

function print_version() {
  echo -e "$SCRIPT $VERSION"\\n
  exit 0
}

function usage()
{
cat << EOF
Help documentation for ${BOLD}${SCRIPT}.${NORM}
${REV}Basic usage:${NORM} ${BOLD}$SCRIPT [OPTIONS]${NORM}

${BOLD}OPTIONS:${NORM}
  ${BOLD}-h, --help${NORM}
    Print a usage message briefly summarizing these command-line options and exit.
  ${BOLD}-V, --version${NORM}
    Print the version number of ${SCRIPT} to the standard output stream.
  ${BOLD}-g, --global${NORM}
    Run some action in a global context, e.g: install node ${NODE_VERSION} globally.

  ${BOLD}--no-git${NORM}
    Exclude git configuration.
  ${BOLD}--git-name${NORM}
    Define ${REV}user.name${NORM} for git configuration.
  ${BOLD}--git-email${NORM}
    Define ${REV}user.email${NORM} for git configuration.

  ${BOLD}--no-vim${NORM}
    Do not configure NeoVim.

  ${BOLD}--no-virtualenv${NORM}
    Do not install virtualenv.

  ${BOLD}--no-node${NORM}
    Do not install ${REV}Node.js${NORM}.

EOF
exit 1
}


#Check the number of arguments. If none are passed, print help and exit.
NUMARGS=$#
if [ $NUMARGS -eq 0 ]; then
  usage
fi


### Start getopts code ###
while [ $# -gt 0 ]; do
  case $1 in
    -h | --help)
      usage
      ;;
    -V | --version)
      print_version
      ;;
    -g | --global)
      GLOBAL=true
      ;;
    --no-git) NO_GIT=true ;;
    --no-vim) NO_VIM=true ;;
    --git-name) GIT_NAME=$2; shift; ;;
    --git-email) GIT_EMAIL=$2; shift; ;;
    --no-virtualenv) NO_VIRTUALENV=true ;;
    --no-node) NO_NODE=true ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not recognized."
      echo -e "Use ${BOLD}$SCRIPT -h${NORM} to see the help documentation."\\n
      exit 2
      ;; 
  esac
  shift
done
### End getopts code ###


### Start Utilities functions ###
function backup_file() {
  test -e $HOME/$1 && cp -LiR $HOME/$1 $HOME/$1.dotbackup && rm -rf $HOME/$1
  return 1
}

function backup_directory() {
  test -d $HOME/$1.dotbackup && echo -n "~/$1.dotbackup: " && rm -rI $HOME/$1.dotbackup
  test -d $HOME/$1 && cp -LR $HOME/$1 $HOME/$1.dotbackup && rm -rf $HOME/$1
  return 1
}

function link_file() {
  backup_file $2
  ln -s `pwd`/$1 $HOME/$2
}

function link_directory() {
  backup_directory $2
  ln -s `pwd`/$1 $HOME/$2
}

function copy_file() {
  backup_file $2
  cp $1 $2
}
### End utilities functions ###

function configure_git() {
  echo "Configuring git..."
  if [ -z "$GIT_NAME" ]; then
    read -p "Git user.name: " GIT_NAME
  fi
  if [ -z "$GIT_EMAIL" ]; then
    read -p "Git user.email: " GIT_EMAIL
  fi
  backup_file .gitconfig
  sed -e 's/\[\[GIT_NAME\]\]/'"$GIT_NAME"'/g' -e 's/\[\[GIT_EMAIL\]\]/'"$GIT_EMAIL"'/g' `pwd`/gitconfig > $HOME/.gitconfig
  copy_file gitignore-global ~/.gitignore
}


function configure_vim() {
  echo "Installing Vim with mode python enabled..."
  ./vim/install_vim.sh
  ./vim/install_pathogen.sh
  ./vim/install_fugitive.sh
  ./vim/install_pep8_pyflakes.sh
  ./vim/install_jedi.sh
  ./vim/install_tasklist.sh
  copy_file vimrc ~/.vimrc
}

function configure_neovim() {
  echo "Installing NeoVim ..."
  ./install_nvim.sh
  copy_file nvimrc  ~/.nvimrc
}

function install_virtualenv() {
  echo "Installing virtualenv..."
  ./install_virtualenv.sh
}

function install_node() {
  echo "Installing Node.js with NVM..."
  ./install_node.sh --node-version $NODE_VERSION -g $GLOBAL
}

function install_zsh() {
  echo "Installing 'Oh MyZSH!' ..."
  ./install_zsh.sh
  echo "Time for reboot :)"
  sudo shutdown -r 0
}

if ! which zsh; then
  printf '%s\n\n' 'dotfiles: zsh not found!' >&2
  install_zsh
fi

### Start main program ###
if [ "$NO_GIT" == false ]; then
  configure_git
fi

if [ "$NO_VIM" == false ]; then
  configure_neovim
fi

if [ "$NO_VIRTUALENV" == false ]; then
  install_virtualenv
fi

if [ "$NO_NODE" == false ]; then
  install_node
fi
### End main program ###
